#! /bin/bash
: '
  Development Helpers
  ===================

  To use this file, you must run it as source in each terminal where you want
  to use these aliases. They just provide some useful shortcuts that should
  make development a little more pleasant.

  So just run:
    source ./develop
  Where the current working directory is set to this directory

  All of the functions are documented below, with usage above the items.
'

# Usage: add-package [-d] [-w] [-dw] <package-name> <turbo-package-name>
# -d: Add the package as a dev dependency
# -w: Add the package to the workspace (for internal workspace packages)
# -dw or -wd: Add the package as a dev dependency and workspace package
# If -d is not provided, the package will be added as a regular dependency
add-package () {
  local is_dev=false
  local is_workspace=false
  local package_name=""
  local turbo_package_name=""

  # Parse arguments
  while [[ "$#" -gt 0 ]]; do
    case $1 in
      -d) is_dev=true; shift ;;
      -w) is_workspace=true; shift ;;
      -dw|-wd) 
        is_dev=true
        is_workspace=true
        shift ;;
      *)  
        if [ -z "$package_name" ]; then
          package_name="$1"
        elif [ -z "$turbo_package_name" ]; then
          turbo_package_name="$1"
        fi
        shift ;;
    esac
  done

  # Validate required arguments
  if [ -z "$package_name" ] || [ -z "$turbo_package_name" ]; then
    echo "Error: Missing required arguments"
    echo "Usage: add-package [-d] [-w] [-dw|-wd] <package-name> <turbo-package-name>"
    return 1
  fi

  # Add workspace:* if -w flag is used
  if [ "$is_workspace" = true ]; then
      package_name="$package_name@workspace:*"
  fi

  # Execute pnpm command with appropriate flags
  if [ "$is_dev" = true ]; then
      pnpm add --save-dev --filter "$turbo_package_name" "$package_name"
  else
      pnpm add --save --filter "$turbo_package_name" "$package_name"
  fi
}

# Run an sst command in the correct stage
# Usage: sst-run -[sdp] <...command>
sst-run() {
  local stage="develop"
  if [ $# -gt 0 ]; then
    case "$1" in
      -d|--develop) stage="develop"; shift ;;
      -s|--staging) stage="staging"; shift ;;
      -p|--production) stage="production"; shift ;;
    esac
  fi
  [ $# -eq 0 ] && { 
    echo "Error: No command provided"
    echo "Usage: sst-run -[sdp] <...command>"
    echo "  -d, --develop    : develop stage (default)"
    echo "  -s, --staging    : staging stage"
    echo "  -p, --production : production stage"
    return 1
  }
  load-aws-profile "chancify-${stage}"
  pnpm exec sst "$@" --stage "$stage"
}

# Starts the development environment
# Usage: start-sst [-sdp]
start-sst() {
  local stage="develop"
  if [ $# -gt 0 ]; then
    case "$1" in
      -d|--develop) sst-run -d dev ;;
      -s|--staging) sst-run -s dev ;;
      -p|--production) sst-run -p dev ;;
      *) 
        echo "Error: Invalid stage '$1'"
        echo "Valid stages: -d (develop), -s (staging), -p (production)"
        return 1
        ;;
    esac
  else
    sst-run dev
  fi
}

# Deploys the SST app
# Usage: deploy-sst <stage>
deploy-sst() {
  local stage=${1:-staging}
  local allowed_stages=(develop staging production)
  
  if [[ ! ${allowed_stages[(ie)$stage]} -le ${#allowed_stages} ]]; then
    echo "Error: Invalid stage '$stage'"
    echo "Allowed stages are: ${allowed_stages[*]}"
    return 1
  fi
  
  load-aws-profile "chancify-${stage}"
  NODE_ENV=production pnpm exec sst deploy --stage "$stage"
}

# Starts the frontend for development
# Usage: start-frontend
start-frontend() {
  pnpm run dev
}

# Load AWS credentials for a specific profile
#   Usage: load-aws-profile <profile-name>
load-aws-profile() {
    typeset profile_name

    if [[ -z "$1" ]]; then
        echo "Usage: load-aws-profile <profile-name>"
        echo "Example: load-aws-profile chancify-staging"
        return 1
    fi

    profile_name="$1"

    # Check if profile exists
    if ! aws configure list --profile "$profile_name" >/dev/null 2>&1; then
        echo "Error: Profile '$profile_name' not found in AWS credentials"
        return 1
    fi

    # Load credentials
    export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile "$profile_name")
    export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile "$profile_name")
    export AWS_REGION=$(aws configure get region --profile "$profile_name" || echo "ap-southeast-2")

    echo "AWS credentials loaded for profile: $profile_name"
    echo "Region set to: $AWS_REGION"
}

# Restart a service
#   Usage: restart-service <service-name>
restart-service () {
  docker compose restart $*
}

# The command line interface defined by this file
#   Usage: cli <subcommands>
cli () {
  docker compose exec cli node ./cli $*
}

# Run a command in the backend service
#   Usage: backend <command>
load-local-env () {
  local env_file=".env.local"
  if [[ -f $env_file ]]; then
    # Export each line in the .env.local file
    while IFS= read -r line; do
      # Ignore lines starting with # and empty lines
      if [[ ! $line =~ ^# ]] && [[ -n $line ]]; then
        export "$line"
      fi
    done < "$env_file"
    echo "Environment variables loaded from $env_file"
  else
    echo "File $env_file does not exist."
  fi
}

# Create an s3 bucket in localstack
#   Usage: create-local-bucket
create-local-bucket () {
  docker compose up -d 
  load-local-env
  ENDPOINT="--endpoint-url=http://localhost:4566"
  aws $ENDPOINT s3 mb s3://$S3_BUCKET_NAME 

  # Give the bucket cors access
  aws $ENDPOINT s3api put-bucket-cors --bucket $S3_BUCKET_NAME \
    --cors-configuration '{
      "CORSRules": [{
        "AllowedOrigins": ["*"],
        "AllowedMethods": ["GET", "PUT", "POST", "DELETE"],
        "AllowedHeaders": ["*"]
      }]
    }'
  OUTPUT=$(aws $ENDPOINT s3api get-bucket-cors --bucket $S3_BUCKET_NAME)
  echo $OUTPUT
}

# Clearing the local dynamodb database by dropping the volume
#   Usage: clear-test-data
clear-test-data () {
  docker compose down
  docker volume rm localstack_data
}

# Runs all model unit tests
#   Usage: test-models
test-models () {
  pnpm test -- **/models/**
}

# Explore the local dynamodb database
#   Usage: dynamodb-explorer
dynamodb-explorer () {
  npm install -g dynamodb-admin
  dynamodb-admin
}

: '
INITIAL SETUP
=============
This should run one time to make sure our files are configured properly
'

# Export ENV Variables
export DEVELOPMENT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

# Make sure the required files are present
if [ ! -f "${DEVELOPMENT_PATH}/.env" ]
then
  touch "${DEVELOPMENT_PATH}/.env"
  echo ".env file created"
fi
